Using The Overture Parser
=========================

The Overture parser can be enabled from VDMJ, assuming you have the jar files
for the parser and its support classes on your classpath.

For example:

CP="parser-1.0.0.jar:ast-1.0.0.jar:stdlib-1.0.0.jar:vdmj-1.0.0.jar"
exec java -Xmx1024m -cp $CP org.overturetool.vdmj.VDMJ -overture $@


Overture is enabled with the -overture argument in place of -vdmpp or -vdmsl (note
that Overture parses VDM++ with VICE extensions, though VDMJ can only check and
interpret VDM++). This will use Overture to parse the source files and then
translate the AST tree into VDMJ's internal format. This is naturally slower than
using VDMJ's native parser. The information messages from the tool indicate that
Overture was used and show the extra AST translation time:

Overture parsed 544 classes in 4.433 secs (0.611 secs AST convert). No parse errors
Type checked 544 classes in 47.54 secs. No type errors and suppressed 3 warnings
Initialized 544 classes in 16.478 secs. 
Interpreter started
>

It is also possible to run the VDM++ JUnit tests using the Overture parser.
This is enabled by setting a system property (typically in the launch configuration
of the JUnit test). Use the JVM argument "-Dparser=overture" to enable it.

Note that the Overture parser's errors are currently not very explicit, are slightly
off if the line contains a mixture of tabs and spaces, and are sent directly to
stdout:

	syntax error at (8, 22) after reading token "g"

There are also some known problems with special characters in strings ("\n" etc),
the processing of some international characters, and its syntax error recovery
is fairly simple.
