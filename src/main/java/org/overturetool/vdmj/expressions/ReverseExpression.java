/*******************************************************************************
 *
 *	Copyright (c) 2009 Fujitsu Services Ltd.
 *
 *	Author: Nick Battle
 *
 *	This file is part of VDMJ.
 *
 *	VDMJ is free software: you can redistribute it and/or modify
 *	it under the terms of the GNU General Public License as published by
 *	the Free Software Foundation, either version 3 of the License, or
 *	(at your option) any later version.
 *
 *	VDMJ is distributed in the hope that it will be useful,
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *	You should have received a copy of the GNU General Public License
 *	along with VDMJ.  If not, see <http://www.gnu.org/licenses/>.
 *
 ******************************************************************************/

package org.overturetool.vdmj.expressions;

import org.overturetool.vdmj.lex.LexLocation;
import org.overturetool.vdmj.pog.POContextStack;
import org.overturetool.vdmj.pog.ProofObligationList;
import org.overturetool.vdmj.runtime.Context;
import org.overturetool.vdmj.typechecker.Environment;
import org.overturetool.vdmj.typechecker.NameScope;
import org.overturetool.vdmj.types.Type;
import org.overturetool.vdmj.types.TypeList;
import org.overturetool.vdmj.types.UnknownType;
import org.overturetool.vdmj.values.SeqValue;
import org.overturetool.vdmj.values.Value;

public class ReverseExpression extends UnaryExpression
{
	private static final long serialVersionUID = 1L;

	public ReverseExpression(LexLocation location, Expression exp)
	{
		super(location, exp);
	}

	@Override
	public String toString()
	{
		return "(reverse " + exp + ")";
	}

	@Override
	public Type typeCheck(Environment env, TypeList qualifiers, NameScope scope)
	{
		// Type checking should establish that the "exp" argument is a
		// sequence. The type of the reverse expression is the same as the
		// type of the argument. What should happen for empty lists, like
		// "reverse []"?

		return new UnknownType(location);	// Dummy
	}

	@Override
	public Value eval(Context ctxt)
	{
		breakpoint.check(location, ctxt);

		// Evaluation needs to evaluate the "exp" argument first to obtain
		// the list of Values to work with. A new return value needs to be
		// created by constructing a list from those Values in reverse order.
		// Note that it is not an error to have an empty list argument.

		return new SeqValue();		// Dummy... return an empty list
	}

	@Override
	public ProofObligationList getProofObligations(POContextStack ctxt)
	{
		// Are there any proof obligations generated by a reverse expression?
		// Remember, this class extends UnaryExpression.

		return new ProofObligationList();
	}

	@Override
	public String kind()
	{
		return "reverse";
	}
}
