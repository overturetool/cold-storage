    types
  
      PhysicalFile ::
        headersec : map seq of char to seq of Parameter
        datasec   : map nat to ([Scope] * Record);

      HeaderEntity ::
        name  : seq of char
        parms : seq of Parameter;

      Scope :: ;

      Record = SimpleRecord | SuperRecord ;

      SuperRecord ::
        rec_list : seq of SimpleRecord;

      SimpleRecord ::
        name  : seq of char
        parms : seq of Parameter;

      Parameter =
        StringParameter |
        RealParameter |
        IntegerParameter |
        EntityInstanceName |
        EnumerationParameter |
        BinaryParameter |
        ListParameter |
        TypedParameter |
        OmittedParameter |
        UnknownParameter ;

      StringParameter ::
        data : seq of char;

      RealParameter ::
        data : real;

      IntegerParameter ::
        data : int;

      EntityInstanceName ::
        data : nat;

      EnumerationParameter ::
        data : seq of char;

      BinaryParameter ::
        data : bool;

      ListParameter ::
        data : seq of Parameter;

      TypedParameter::
        name : seq of char
        data : Parameter;

      OmittedParameter:: ;

      UnknownParameter::

    functions
      MapInToOut : seq of nat * map nat to nat -> seq of EntityInstanceName
      MapInToOut (ins, lut) ==
         if ins = [] then
           []
         else
           [mk_EntityInstanceName(lut(hd ins))] ^ MapInToOut(tl ins, lut);

      Collect : set of seq of nat -> set of nat
      Collect (theSet) ==
        cases theSet:
          {} -> {},
          others -> let e in set theSet in elems e union Collect(theSet\{e})
        end;

      IsA: Record * seq of char -> bool
      IsA(rec,nm) ==
        if is_SimpleRecord(rec) then
          let mk_SimpleRecord (name,-) = rec in
             nm = name
        else
          false;

      SortInnerLeft: set of (nat * nat) * nat -> seq of nat
      SortInnerLeft (theSet, goal) ==
         cases theSet:
           {} -> [],
           others ->
             let mk_(a,b) in set theSet be st a = goal in
                SortInnerRight(theSet\{mk_(a,b)}, b)
         end;

      SortInnerRight: set of (nat * nat) * nat -> seq of nat
      SortInnerRight (theSet,goal) ==
         cases theSet:
           {} -> [],
           others ->
             let mk_(a,b) in set theSet be st b = goal in
                [b] ^ SortInnerLeft(theSet\{mk_(a,b)}, a)
         end;

types

	Eid = token;
	Value = token; 
	Esetnm = token;
	Rnm = token;
	
	Maptp = <ONETOONE>|<ONETOMANY>|<MANYTOONE>|<MANYTOMANY>;

	Tuple :: fv : Eid
		 tv : Eid;

	Rinf :: tp : Maptp
		 r : set of Tuple;
		 
	Rkey :: nm : [Rnm]
		fs : Esetnm
		ts : Esetnm

functions

checkinv : map Esetnm to set of Eid * map Eid to [Value] * map Rkey to
Rinf -> bool
checkinv (esm,em,rm) ==
dom em = dunion rng esm and
              forall rk in set dom rm &
                 let mk_Rkey(-,fs,ts)=rk in
                 let mk_Rinf(tp,r) = rm(rk) in
                        {fs,ts} subset dom esm and
                        (tp = <ONETOMANY> => forall t1,t2 in
                        set r & t1.tv = t2.tv  => t1.fv = t2.fv) and
                        (tp = <MANYTOONE> => forall t1,t2 in
                        set r & t1.fv = t2.fv =>t1.tv = t2.tv) and
                        (tp = <ONETOONE> => forall t1,t2 in
                        set r & t1.fv = t2.fv <=> t1.tv = t2.tv) and
                        forall mk_Tuple(fv,tv) in set r & fv
                        in set esm(fs) and tv in set esm(ts)



